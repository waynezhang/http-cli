(define-macro (-> _param)
 (let (f (fn (v func-with-param rest-funcs)
          (let (ret (eval (cons (first func-with-param ) (cons v (rest func-with-param)))))
           (if (> (length rest-funcs) 0)
            (f 'ret (first rest-funcs) (rest rest-funcs))
            ret))))
  (if (= (length (args)) 0)
   (eval _param)
   (apply f (list _param (first (args)) (rest (args)))))))
(global '->)

(define-macro (->> _param)
 (let (f (fn (v func-with-param rest-funcs)
          (let (ret (eval (cons (first func-with-param ) (reverse (cons v (reverse (rest func-with-param)))))))
           (if (> (length rest-funcs) 0)
            (f 'ret (first rest-funcs) (rest rest-funcs))
            ret))))
  (if (= (length (args)) 0)
   (eval _param)
   (apply f (list _param (first (args)) (rest (args)))))))
(global '->>)
